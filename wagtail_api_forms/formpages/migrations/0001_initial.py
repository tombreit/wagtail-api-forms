# Generated by Django 3.2.7 on 2021-09-23 13:58

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import private_storage.fields
import private_storage.storage.files
import uuid
import wagtail.fields
import wagtail_api_forms.formpages.model_mixins
import wagtail_api_forms.formpages.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authtoken', '0003_tokenproxy'),
        ('wagtailcore', '0062_comment_models_and_pagesubscription'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True)),
                ('use_captcha', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail_api_forms.formpages.model_mixins.FormPageApiMixin, wagtail_api_forms.formpages.model_mixins.FormPageAdditionalFieldsMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='TokenUserProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('authtoken.token',),
        ),
        migrations.CreateModel(
            name='UserFormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('css_classes', models.CharField(blank=True, help_text='Additional CSS classes, comma separated.', max_length=255)),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field'), ('image', 'Image file'), ('document', 'Document file')], max_length=255, verbose_name='field type')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='formpages.formpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomFormSubmission',
            fields=[
                ('form_data', models.TextField()),
                ('submit_time', models.DateTimeField(auto_now_add=True, verbose_name='submit time')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('form_data_api', models.TextField(blank=True)),
                ('client_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('referrer', models.CharField(blank=True, max_length=250, verbose_name='Referrer URL')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'form submission',
                'verbose_name_plural': 'form submissions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', private_storage.fields.PrivateFileField(blank=True, storage=private_storage.storage.files.PrivateFileSystemStorage(), upload_to=wagtail_api_forms.formpages.models.attachment_directory_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('av_scanned_at', models.DateTimeField(blank=True, null=True)),
                ('av_passed', models.BooleanField(default=False)),
                ('av_reason', models.CharField(blank=True, max_length=255, null=True)),
                ('file_art', models.CharField(choices=[('IMG_FILE', 'Image File'), ('DOC_FILE', 'Document File')], default='DOC_FILE', max_length=8)),
                ('form_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='formpages.customformsubmission')),
            ],
        ),
        migrations.CreateModel(
            name='TokenForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='formpages.tokenuserproxy')),
                ('form', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='formpages.formpage')),
            ],
            options={
                'unique_together': {('form', 'api_user')},
            },
        ),
    ]
